{"remainingRequest":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/Narendras/Documents/Projects/Website/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/Narendras/Documents/Projects/Website/docs/javascript/the-hard-parts/m02.md?vue&type=template&id=fccb6bf2&","dependencies":[{"path":"/Users/Narendras/Documents/Projects/Website/docs/javascript/the-hard-parts/m02.md","mtime":1540966972911},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js","mtime":1539927363321},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js","mtime":1539927363321},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"functional-programming-and-closure\"><a class=\"header-anchor\" href=\"#functional-programming-and-closure\" aria-hidden=\"true\">#</a> Functional Programming and Closure</h1>\n<h3 id=\"pure-functions\"><a class=\"header-anchor\" href=\"#pure-functions\" aria-hidden=\"true\">#</a> Pure Functions</h3>\n<p>Pure functions are functions that have no <strong>side effects</strong>. This means that the function does not change any other part of the program other than what it is meant to do.</p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">Note</p>\n<p>If a global variable is passed onto a function as a parameter, it is passed by <em>reference</em>. This means that if the parameter is changed, then the global variable is changed as well.</p>\n</div>\n<h3 id=\"high-order-functions\"><a class=\"header-anchor\" href=\"#high-order-functions\" aria-hidden=\"true\">#</a> High Order Functions</h3>\n<p>A high order function is a function that abstracts not only the type of data that it might receive, but also a part of the functionality. In other words, a function that either takes in or returns a function.</p>\n<p>This is possible in javascript because functions are treated as <strong>objects</strong>. They operate and can be treated like any other object.</p>\n<p>The built-in <code>map</code> function is an example of a higher-order function:</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"closure\"><a class=\"header-anchor\" href=\"#closure\" aria-hidden=\"true\">#</a> Closure</h2>\n<p>When a function finishes executing, its local memory is deleted. However it is possible for functions to hold on to live data between executions.</p>\n<p>The key principle here is that <em>where</em> the functions are defined determines <em>what variables</em> the function has access to during execution. For example:</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> func <span class=\"token operator\">=</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Notice how the returned function does things with the <code>counter</code> variable but the <code>counter</code> variable itself was never returned. This means that the <code>counter</code> variable will be the <strong>same</strong> for all executions of <code>func</code>. As a result multiple executions of <code>func</code> would show the following:</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>The reason this works is because when a function is returned, its <em>lexical scope</em> is returned along with it. When the function is run and there is a variable, the javascript engine first looks in the local memory for the variable, then its lexical scope, then the global memory.</p>\n<p>If we produce another function by calling <code>outer</code> again, say <code>func2</code>, then <code>func2</code> will have a different lexical scope than <code>func</code>. That is it will &quot;restart&quot; the counter variable rather than continuing it from the original calls to <code>func</code>.</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> func <span class=\"token operator\">=</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints 1</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints 2</span>\n\n<span class=\"token keyword\">const</span> func2 <span class=\"token operator\">=</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints 1</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}