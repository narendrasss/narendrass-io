{"remainingRequest":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/Narendras/Documents/Projects/Website/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/Narendras/Documents/Projects/Website/docs/cpsc/317/a2.md?vue&type=template&id=2679674a&","dependencies":[{"path":"/Users/Narendras/Documents/Projects/Website/docs/cpsc/317/a2.md","mtime":1539931015519},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js","mtime":1539927363321},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js","mtime":1539927363321},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"dns-resolver-client\"><a class=\"header-anchor\" href=\"#dns-resolver-client\" aria-hidden=\"true\">#</a> DNS Resolver Client</h1>\n<h2 id=\"specification\"><a class=\"header-anchor\" href=\"#specification\" aria-hidden=\"true\">#</a> Specification</h2>\n<p>The task is to create a client that interacts with various DNS servers to resolve domain names into IP addresses. The client should be able to resolve to either IPv4 or IPv6 addresses depending on commands provided.</p>\n<p>The output of the program should follow the following format:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>name_being_looked_up ADDRESS_TYPE TTL IP_address\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>An example output of the program would be:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>DNSLOOKUP&gt; lookup www.cs.ubc.ca\nwww.cs.ubc.ca                  A     3600     142.103.6.5\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>The program should output all addresses if multiple IP addresses are found. An IPv6 result would look like:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>NSLOOKUP&gt; lookup www.microsoft.com AAAA\nwww.microsoft.com              AAAA  20       2600:1409:a:5a1:0:0:0:747\nwww.microsoft.com              AAAA  20       2600:1409:a:5a2:0:0:0:747\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If the IP address is <em>not</em> found, then a TTL of -1 and an IP of 0.0.0.0 should be returned:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>DNSLOOKUP&gt; lookup blueberry.ubc.ca\nblueberry.ubc.ca               A     -1       0.0.0.0\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"initial-steps\"><a class=\"header-anchor\" href=\"#initial-steps\" aria-hidden=\"true\">#</a> Initial Steps</h2>\n<p>My initial process is to understand the terms and the classes that are defined in the repository given to us. The directory given to us had the following structure:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><div class=\"highlight-lines\"><br><br><br><div class=\"highlighted\">&nbsp;</div><br><br><br><br></div><pre v-pre class=\"language-text\"><code>.\n└─ src\n   ├─ DNSCache.java\n   ├─ DNSLookupService.java\n   ├─ DNSNode.java\n   ├─ RecordType.java\n   └─ ResourceRecord.java\n</code></pre><!--beforeend--></div><!--afterend--><p>Where <code>DNSLookupService.java</code> is the file that we have to implement (the <code>main</code> function there was already implemented for us).</p>\n<p>Specifically, we have to implement two functions:</p>\n<ol>\n<li>The first being <code>getResults</code>, shown below:</li>\n</ol>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code><span class=\"token comment\">/**\n* Finds all the result for a specific node.\n*\n* @param node             Host and record type to be used for search.\n* @param indirectionLevel Control to limit the number of recursive calls due to CNAME redirection.\n*                         The initial call should be made with 0 (zero), while recursive calls for\n*                         regarding CNAME results should increment this value by 1. Once this value\n*                         reaches MAX_INDIRECTION_LEVEL, the function prints an error message and\n*                         returns an empty set.\n* @return A set of resource records corresponding to the specific query requested.\n*/</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> Set<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>ResourceRecord<span class=\"token punctuation\">></span></span> <span class=\"token function\">getResults</span><span class=\"token punctuation\">(</span>DNSNode node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> indirectionLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>indirectionLevel <span class=\"token operator\">></span> MAX_INDIRECTION_LEVEL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Maximum number of indirection levels reached.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> Collections<span class=\"token punctuation\">.</span><span class=\"token function\">emptySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// TODO To be completed by the student</span>\n\n    <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">getCachedResults</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><ol start=\"2\">\n<li>And <code>retrieveResultsFromServer</code>, shown below:</li>\n</ol>\n<!--beforebegin--><div class=\"language-java extra-class\"><!--afterbegin--><pre v-pre class=\"language-java\"><code><span class=\"token comment\">/**\n* Retrieves DNS results from a specified DNS server. Queries are sent in iterative mode,\n* and the query is repeated with a new server if the provided one is non-authoritative.\n* Results are stored in the cache.\n*\n* @param node   Host name and record type to be used for the query.\n* @param server Address of the server to be used for the query.\n*/</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">retrieveResultsFromServer</span><span class=\"token punctuation\">(</span>DNSNode node<span class=\"token punctuation\">,</span> InetAddress server<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// TODO To be completed by the student</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>I wasn't entirely sure what these functions were supposed to do because I didn't understand the different record types and what the input to these functions were supposed to be.</p>\n<h3 id=\"record-types\"><a class=\"header-anchor\" href=\"#record-types\" aria-hidden=\"true\">#</a> Record Types</h3>\n<p>The client should support the following record types:</p>\n<ol>\n<li><code>A</code> - address record, returns a 32-bit IPv4 address.</li>\n<li><code>NS</code> - contains the domain name for the authoritative DNS server.</li>\n<li><code>CNAME</code> - maps a domain name to another (e.g. redirects <code>ftp.example.com</code> to <code>example.com</code>).</li>\n<li><code>SOA</code></li>\n<li><code>MX</code></li>\n<li><code>AAAA</code></li>\n</ol>\n</div>\n",null]}