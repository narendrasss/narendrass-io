{"remainingRequest":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/Narendras/Documents/Projects/Website/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/Narendras/Documents/Projects/Website/docs/javascript/the-hard-parts/m03.md?vue&type=template&id=fcca8334&","dependencies":[{"path":"/Users/Narendras/Documents/Projects/Website/docs/javascript/the-hard-parts/m03.md","mtime":1540967034202},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js","mtime":1539927363321},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js","mtime":1539927363321},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"asynchronous-javascript\"><a class=\"header-anchor\" href=\"#asynchronous-javascript\" aria-hidden=\"true\">#</a> Asynchronous Javascript</h1>\n<p>The fact that javascript's thread is single-threaded suggests that asynchrony is not possible. However asynchronous code is crucial for web development as often we would need to wait for data before calling our functions.</p>\n<h2 id=\"browser-api\"><a class=\"header-anchor\" href=\"#browser-api\" aria-hidden=\"true\">#</a> Browser API</h2>\n<p>Consider the following code.</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">printHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>printHello<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Me first!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>What prints first, <code>me first!</code> or <code>hello</code>? The javascript engine first allocates memory for the definition of <code>printHello</code> in the global namespace. But then what exactly happens when <code>setTimeout</code> is called?</p>\n<p>One of the aspects of the browser API is a background timer. The <code>setTimeout</code> function utilizes this timer, using it to determine when <code>printHello</code> should be called. In this particular case, <code>setTimeout</code> tells the browser to set up a timer for <code>0ms</code>, then once it's complete, call <code>printHello</code>. As a result, <code>Me first!</code> would print before <code>Hello</code>.</p>\n<h2 id=\"callback-queue\"><a class=\"header-anchor\" href=\"#callback-queue\" aria-hidden=\"true\">#</a> Callback Queue</h2>\n<p>If we add some function that blocks the single javascript thread for a second like so:</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">printHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">block1Sec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* blocks the thread for 1 sec */</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>printHello<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">block1Sec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Me first!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Now what gets printed first? The <code>setTimeout</code> function does the exact same thing as before, except this time the timer completes <em>during</em> the execution of <code>block1Sec()</code>.</p>\n<p>Whenever a callback is <em>queued</em>, it gets added to the <strong>callback queue</strong>. The callback queue works such that it only runs whatever is in front of the queue whenever <em>all</em> functions complete, including global. In other words it only adds the function to the call stack whenever the call stack is empty.</p>\n<p>Thus in this case <code>Hello</code> would always print last as the callback queue waits until all code, that is <code>block1Sec()</code> and <code>console.log</code>, to complete before it runs <code>printHello</code>.</p>\n<h2 id=\"xmlhttprequest\"><a class=\"header-anchor\" href=\"#xmlhttprequest\" aria-hidden=\"true\">#</a> XMLHttpRequest</h2>\n<p>Often we would like to receive some form of data from a server somewhere. This is done through <code>XMLHttpRequest</code> from the browser API. If we want to receive some data, we pass the <code>GET</code> method in the request:</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://www.example.org/example.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If we add an <em>event listener</em> to the <code>XMLHttpRequest</code>, we can pass a callback function that would run when this request completes:</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">logResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> logResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Libraries like <code>jQuery</code> wraps up this logic in a simple <code>get</code> function like so:</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">logResponse</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n$<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.example.org/example.txt\"</span><span class=\"token punctuation\">,</span> logResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}