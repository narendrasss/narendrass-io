{"remainingRequest":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/Narendras/Documents/Projects/Website/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/Narendras/Documents/Projects/Website/docs/cpsc/317/a2.md?vue&type=template&id=2679674a&","dependencies":[{"path":"/Users/Narendras/Documents/Projects/Website/docs/cpsc/317/a2.md","mtime":1539931015519},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js","mtime":1539927363321},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js","mtime":1539927363321},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h1\", { attrs: { id: \"dns-resolver-client\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#dns-resolver-client\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" DNS Resolver Client\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"specification\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#specification\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Specification\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"The task is to create a client that interacts with various DNS servers to resolve domain names into IP addresses. The client should be able to resolve to either IPv4 or IPv6 addresses depending on commands provided.\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"The output of the program should follow the following format:\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\"name_being_looked_up ADDRESS_TYPE TTL IP_address\\n\")\n          ])\n        ])\n      ]),\n      _c(\"p\", [_vm._v(\"An example output of the program would be:\")]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              \"DNSLOOKUP> lookup www.cs.ubc.ca\\nwww.cs.ubc.ca                  A     3600     142.103.6.5\\n\"\n            )\n          ])\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          \"The program should output all addresses if multiple IP addresses are found. An IPv6 result would look like:\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              \"NSLOOKUP> lookup www.microsoft.com AAAA\\nwww.microsoft.com              AAAA  20       2600:1409:a:5a1:0:0:0:747\\nwww.microsoft.com              AAAA  20       2600:1409:a:5a2:0:0:0:747\\n\"\n            )\n          ])\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\"If the IP address is \"),\n        _c(\"em\", [_vm._v(\"not\")]),\n        _vm._v(\n          \" found, then a TTL of -1 and an IP of 0.0.0.0 should be returned:\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              \"DNSLOOKUP> lookup blueberry.ubc.ca\\nblueberry.ubc.ca               A     -1       0.0.0.0\\n\"\n            )\n          ])\n        ])\n      ]),\n      _c(\"h2\", { attrs: { id: \"initial-steps\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#initial-steps\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Initial Steps\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"My initial process is to understand the terms and the classes that are defined in the repository given to us. The directory given to us had the following structure:\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"div\", { staticClass: \"highlight-lines\" }, [\n          _c(\"br\"),\n          _c(\"br\"),\n          _c(\"br\"),\n          _c(\"div\", { staticClass: \"highlighted\" }, [_vm._v(\" \")]),\n          _c(\"br\"),\n          _c(\"br\"),\n          _c(\"br\"),\n          _c(\"br\")\n        ]),\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              \".\\n└─ src\\n   ├─ DNSCache.java\\n   ├─ DNSLookupService.java\\n   ├─ DNSNode.java\\n   ├─ RecordType.java\\n   └─ ResourceRecord.java\\n\"\n            )\n          ])\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\"Where \"),\n        _c(\"code\", [_vm._v(\"DNSLookupService.java\")]),\n        _vm._v(\" is the file that we have to implement (the \"),\n        _c(\"code\", [_vm._v(\"main\")]),\n        _vm._v(\" function there was already implemented for us).\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"Specifically, we have to implement two functions:\")]),\n      _vm._v(\" \"),\n      _c(\"ol\", [\n        _c(\"li\", [\n          _vm._v(\"The first being \"),\n          _c(\"code\", [_vm._v(\"getResults\")]),\n          _vm._v(\", shown below:\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-java extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-java\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                \"/**\\n* Finds all the result for a specific node.\\n*\\n* @param node             Host and record type to be used for search.\\n* @param indirectionLevel Control to limit the number of recursive calls due to CNAME redirection.\\n*                         The initial call should be made with 0 (zero), while recursive calls for\\n*                         regarding CNAME results should increment this value by 1. Once this value\\n*                         reaches MAX_INDIRECTION_LEVEL, the function prints an error message and\\n*                         returns an empty set.\\n* @return A set of resource records corresponding to the specific query requested.\\n*/\"\n              )\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"private\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"static\")\n            ]),\n            _vm._v(\" Set\"),\n            _c(\"span\", { attrs: { class: \"token generics function\" } }, [\n              _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\"<\")\n              ]),\n              _vm._v(\"ResourceRecord\"),\n              _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n                _vm._v(\">\")\n              ])\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token function\" } }, [\n              _vm._v(\"getResults\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"DNSNode node\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"int\")]),\n            _vm._v(\" indirectionLevel\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n\\n    \"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"if\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"indirectionLevel \"),\n            _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\">\")]),\n            _vm._v(\" MAX_INDIRECTION_LEVEL\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n        System\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _vm._v(\"err\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token function\" } }, [\n              _vm._v(\"println\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token string\" } }, [\n              _vm._v('\"Maximum number of indirection levels reached.\"')\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\"\\n        \"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"return\")\n            ]),\n            _vm._v(\" Collections\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token function\" } }, [\n              _vm._v(\"emptySet\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\"\\n    \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\\n    \"),\n            _c(\"span\", { attrs: { class: \"token comment\" } }, [\n              _vm._v(\"// TODO To be completed by the student\")\n            ]),\n            _vm._v(\"\\n\\n    \"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"return\")\n            ]),\n            _vm._v(\" cache\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\".\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token function\" } }, [\n              _vm._v(\"getCachedResults\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"node\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\";\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\")\n          ])\n        ])\n      ]),\n      _c(\"ol\", { attrs: { start: \"2\" } }, [\n        _c(\"li\", [\n          _vm._v(\"And \"),\n          _c(\"code\", [_vm._v(\"retrieveResultsFromServer\")]),\n          _vm._v(\", shown below:\")\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language-java extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-java\" } }, [\n          _c(\"code\", [\n            _c(\"span\", { attrs: { class: \"token comment\" } }, [\n              _vm._v(\n                \"/**\\n* Retrieves DNS results from a specified DNS server. Queries are sent in iterative mode,\\n* and the query is repeated with a new server if the provided one is non-authoritative.\\n* Results are stored in the cache.\\n*\\n* @param node   Host name and record type to be used for the query.\\n* @param server Address of the server to be used for the query.\\n*/\"\n              )\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"private\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [\n              _vm._v(\"static\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"void\")]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token function\" } }, [\n              _vm._v(\"retrieveResultsFromServer\")\n            ]),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"(\")\n            ]),\n            _vm._v(\"DNSNode node\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\",\")\n            ]),\n            _vm._v(\" InetAddress server\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\")\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"{\")\n            ]),\n            _vm._v(\"\\n\\n    \"),\n            _c(\"span\", { attrs: { class: \"token comment\" } }, [\n              _vm._v(\"// TODO To be completed by the student\")\n            ]),\n            _vm._v(\"\\n\"),\n            _c(\"span\", { attrs: { class: \"token punctuation\" } }, [\n              _vm._v(\"}\")\n            ]),\n            _vm._v(\"\\n\")\n          ])\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          \"I wasn't entirely sure what these functions were supposed to do because I didn't understand the different record types and what the input to these functions were supposed to be.\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"h3\", { attrs: { id: \"record-types\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#record-types\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Record Types\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"The client should support the following record types:\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ol\", [\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"A\")]),\n          _vm._v(\" - address record, returns a 32-bit IPv4 address.\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"NS\")]),\n          _vm._v(\n            \" - contains the domain name for the authoritative DNS server.\"\n          )\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"code\", [_vm._v(\"CNAME\")]),\n          _vm._v(\" - maps a domain name to another (e.g. redirects \"),\n          _c(\"code\", [_vm._v(\"ftp.example.com\")]),\n          _vm._v(\" to \"),\n          _c(\"code\", [_vm._v(\"example.com\")]),\n          _vm._v(\").\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [_c(\"code\", [_vm._v(\"SOA\")])]),\n        _vm._v(\" \"),\n        _c(\"li\", [_c(\"code\", [_vm._v(\"MX\")])]),\n        _vm._v(\" \"),\n        _c(\"li\", [_c(\"code\", [_vm._v(\"AAAA\")])])\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}