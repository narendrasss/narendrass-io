{"remainingRequest":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/Narendras/Documents/Projects/Website/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/Narendras/Documents/Projects/Website/docs/javascript/the-hard-parts/m01.md?vue&type=template&id=fccc54b0&","dependencies":[{"path":"/Users/Narendras/Documents/Projects/Website/docs/javascript/the-hard-parts/m01.md","mtime":1540966910496},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js","mtime":1539927363321},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js","mtime":1539927363321},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"principles-of-javascript\"><a class=\"header-anchor\" href=\"#principles-of-javascript\" aria-hidden=\"true\">#</a> Principles of Javascript</h1>\n<h2 id=\"global-execution-context\"><a class=\"header-anchor\" href=\"#global-execution-context\" aria-hidden=\"true\">#</a> Global Execution Context</h2>\n<p>What happens when javascript runs the following code?</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span>inputNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> inputNumber <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Will\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>The variables <code>num</code> and <code>name</code> are stored in global memory. The function <code>multiplyBy2</code> is also stored globally, but its contents are skipped because the function is never called.</p>\n<p>As the code is run we create a <em>global execution context</em>.</p>\n<p>The thread that runs javascript is <em>single-threaded</em>, that is it only ever runs one thing at a time.</p>\n<h2 id=\"local-execution-context\"><a class=\"header-anchor\" href=\"#local-execution-context\" aria-hidden=\"true\">#</a> Local Execution Context</h2>\n<p>When a function is called, a <em>local execution context</em> is created.</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span>inputNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> inputNumber <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>In the local execution context there exists a <em>local thread</em> and <em>local memory</em>. The local thread runs all the code within the function block line by line. This execution blocks the global thread from running.</p>\n<p>In global memory, <code>output</code> is saved as <code>undefined</code> until the <code>multiplyBy2</code> function finishes executing. Then, <code>output</code> is updated to the returned result. Steps:</p>\n<ol>\n<li><code>output</code> is saved as <code>undefined</code> in global memory.</li>\n<li>In local memory, the parameter <code>inputNumber</code> is updated to <code>4</code>.</li>\n<li>The constant <code>result</code> is saved into local memory as <code>4 * 2 = 8</code>.</li>\n<li>All local memory is deleted except for <code>result</code>.</li>\n<li><code>result</code> is returned and saved into <code>output</code>.</li>\n</ol>\n<h2 id=\"call-stack\"><a class=\"header-anchor\" href=\"#call-stack\" aria-hidden=\"true\">#</a> Call Stack</h2>\n<p>The call stack is a way for the javascript runtime to know &quot;where&quot; it is in the program. The global execution context is the always on the bottom of this stack. Any additional execution contexts are added to the top of the stack whenever it is created.</p>\n</div>\n",null]}