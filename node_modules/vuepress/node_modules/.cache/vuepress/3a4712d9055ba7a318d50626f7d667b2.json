{"remainingRequest":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/Narendras/Documents/Projects/Website/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/Narendras/Documents/Projects/Website/docs/javascript/m01.md?vue&type=template&id=05c3e3db&","dependencies":[{"path":"/Users/Narendras/Documents/Projects/Website/docs/javascript/m01.md","mtime":1540794858827},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js","mtime":1539927363321},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js","mtime":1539927363321},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"the-hard-parts\"><a class=\"header-anchor\" href=\"#the-hard-parts\" aria-hidden=\"true\">#</a> The Hard Parts</h1>\n<h2 id=\"principles-of-javascript\"><a class=\"header-anchor\" href=\"#principles-of-javascript\" aria-hidden=\"true\">#</a> Principles of Javascript</h2>\n<h3 id=\"global-execution-context\"><a class=\"header-anchor\" href=\"#global-execution-context\" aria-hidden=\"true\">#</a> Global Execution Context</h3>\n<p>What happens when javascript runs the following code?</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span>inputNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> inputNumber <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Will\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>The variables <code>num</code> and <code>name</code> are stored in global memory. The function <code>multiplyBy2</code> is also stored globally, but its contents are skipped because the function is never called.</p>\n<p>As the code is run we create a <em>global execution context</em>.</p>\n<p>The thread that runs javascript is <em>single-threaded</em>, that is it only ever runs one thing at a time.</p>\n<h3 id=\"local-execution-context\"><a class=\"header-anchor\" href=\"#local-execution-context\" aria-hidden=\"true\">#</a> Local Execution Context</h3>\n<p>When a function is called, a <em>local execution context</em> is created.</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span>inputNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> inputNumber <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> output <span class=\"token operator\">=</span> <span class=\"token function\">multiplyBy2</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>In the local execution context there exists a <em>local thread</em> and <em>local memory</em>. The local thread runs all the code within the function block line by line. This execution blocks the global thread from running.</p>\n<p>In global memory, <code>output</code> is saved as <code>undefined</code> until the <code>multiplyBy2</code> function finishes executing. Then, <code>output</code> is updated to the returned result. Steps:</p>\n<ol>\n<li><code>output</code> is saved as <code>undefined</code> in global memory.</li>\n<li>In local memory, the parameter <code>inputNumber</code> is updated to <code>4</code>.</li>\n<li>The constant <code>result</code> is saved into local memory as <code>4 * 2 = 8</code>.</li>\n<li>All local memory is deleted except for <code>result</code>.</li>\n<li><code>result</code> is returned and saved into <code>output</code>.</li>\n</ol>\n<h3 id=\"call-stack\"><a class=\"header-anchor\" href=\"#call-stack\" aria-hidden=\"true\">#</a> Call Stack</h3>\n<p>The call stack is a way for the javascript runtime to know &quot;where&quot; it is in the program. The global execution context is the always on the bottom of this stack. Any additional execution contexts are added to the top of the stack whenever it is created.</p>\n<h2 id=\"functional-programming\"><a class=\"header-anchor\" href=\"#functional-programming\" aria-hidden=\"true\">#</a> Functional Programming</h2>\n<h3 id=\"pure-functions\"><a class=\"header-anchor\" href=\"#pure-functions\" aria-hidden=\"true\">#</a> Pure Functions</h3>\n<p>Pure functions are functions that have no <strong>side effects</strong>. This means that the function does not change any other part of the program other than what it is meant to do.</p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">Note</p>\n<p>If a global variable is passed onto a function as a parameter, it is passed by <em>reference</em>. This means that if the parameter is changed, then the global variable is changed as well.</p>\n</div>\n<h3 id=\"high-order-functions\"><a class=\"header-anchor\" href=\"#high-order-functions\" aria-hidden=\"true\">#</a> High Order Functions</h3>\n<p>A high order function is a function that abstracts not only the type of data that it might receive, but also a part of the functionality. In other words, a function that either takes in or returns a function.</p>\n<p>This is possible in javascript because functions are treated as <strong>objects</strong>. They operate and can be treated like any other object.</p>\n<p>The built-in <code>map</code> function is an example of a higher-order function:</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"closure\"><a class=\"header-anchor\" href=\"#closure\" aria-hidden=\"true\">#</a> Closure</h2>\n<p>When a function finishes executing, its local memory is deleted. However it is possible for functions to hold on to live data between executions.</p>\n<p>The key principle here is that <em>where</em> the functions are defined determines <em>what variables</em> the function has access to during execution. For example:</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        counter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> func <span class=\"token operator\">=</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Notice how the returned function does things with the <code>counter</code> variable but the <code>counter</code> variable itself was never returned. This means that the <code>counter</code> variable will be the <strong>same</strong> for all executions of <code>func</code>. As a result multiple executions of <code>func</code> would show the following:</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>The reason this works is because when a function is returned, its <em>lexical scope</em> is returned along with it. When the function is run and there is a variable, the javascript engine first looks in the local memory for the variable, then its lexical scope, then the global memory.</p>\n<p>If we produce another function by calling <code>outer</code> again, say <code>func2</code>, then <code>func2</code> will have a different lexical scope than <code>func</code>. That is it will &quot;restart&quot; the counter variable rather than continuing it from the original calls to <code>func</code>.</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> func <span class=\"token operator\">=</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints 1</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints 2</span>\n\n<span class=\"token keyword\">const</span> func2 <span class=\"token operator\">=</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints 1</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"asynchronous-javascript\"><a class=\"header-anchor\" href=\"#asynchronous-javascript\" aria-hidden=\"true\">#</a> Asynchronous Javascript</h2>\n<p>The fact that javascript's thread is single-threaded suggests that asynchrony is not possible. However asynchronous code is crucial for web development as often we would need to wait for data before calling our functions.</p>\n<h3 id=\"browser-api\"><a class=\"header-anchor\" href=\"#browser-api\" aria-hidden=\"true\">#</a> Browser API</h3>\n<p>Consider the following code.</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">printHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>printHello<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Me first!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>What prints first, <code>me first!</code> or <code>hello</code>? The javascript engine first allocates memory for the definition of <code>printHello</code> in the global namespace. But then what exactly happens when <code>setTimeout</code> is called?</p>\n<p>One of the aspects of the browser API is a background timer. The <code>setTimeout</code> function utilizes this timer, using it to determine when <code>printHello</code> should be called. In this particular case, <code>setTimeout</code> tells the browser to set up a timer for <code>0ms</code>, then once it's complete, call <code>printHello</code>. As a result, <code>Me first!</code> would print before <code>Hello</code>.</p>\n<h3 id=\"callback-queue\"><a class=\"header-anchor\" href=\"#callback-queue\" aria-hidden=\"true\">#</a> Callback Queue</h3>\n<p>If we add some function that blocks the single javascript thread for a second like so:</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">printHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">block1Sec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* blocks the thread for 1 sec */</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>printHello<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">block1Sec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Me first!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Now what gets printed first? The <code>setTimeout</code> function does the exact same thing as before, except this time the timer completes <em>during</em> the execution of <code>block1Sec()</code>.</p>\n<p>Whenever a callback is <em>queued</em>, it gets added to the <strong>callback queue</strong>. The callback queue works such that it only runs whatever is in front of the queue whenever <em>all</em> functions complete, including global. In other words it only adds the function to the call stack whenever the call stack is empty.</p>\n<p>Thus in this case <code>Hello</code> would always print last as the callback queue waits until all code, that is <code>block1Sec()</code> and <code>console.log</code>, to complete before it runs <code>printHello</code>.</p>\n<h3 id=\"xmlhttprequest\"><a class=\"header-anchor\" href=\"#xmlhttprequest\" aria-hidden=\"true\">#</a> XMLHttpRequest</h3>\n<p>Often we would like to receive some form of data from a server somewhere. This is done through <code>XMLHttpRequest</code> from the browser API. If we want to receive some data, we pass the <code>GET</code> method in the request:</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://www.example.org/example.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>If we add an <em>event listener</em> to the <code>XMLHttpRequest</code>, we can pass a callback function that would run when this request completes:</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">logResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nreq<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span> logResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Libraries like <code>jQuery</code> wraps up this logic in a simple <code>get</code> function like so:</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">logResponse</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n$<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.example.org/example.txt\"</span><span class=\"token punctuation\">,</span> logResponse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"object-oriented-javascript\"><a class=\"header-anchor\" href=\"#object-oriented-javascript\" aria-hidden=\"true\">#</a> Object-Oriented Javascript</h2>\n<p>Object oriented programming (OOP) is a programming paradigm used to structure code. It is essentially a way such that all functionality relevant to <em>some data</em> is <em>immediately available</em> when we are dealing with that exact data.</p>\n<p>For example, say we have some users with scores and we wish to have the ability to increase the score for a particular user. We can store this data in an <strong>object</strong>:</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> user1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Will\"</span><span class=\"token punctuation\">,</span>\n    score<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    increment<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        user1<span class=\"token punctuation\">.</span>score<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nuser1<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// user1.score = 4</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"declaring-objects\"><a class=\"header-anchor\" href=\"#declaring-objects\" aria-hidden=\"true\">#</a> Declaring Objects</h3>\n<p>One method we can use to declare objects is by first creating an empty object then using <strong>dot notation</strong>:</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> user2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nuser2<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Tim\"</span><span class=\"token punctuation\">;</span>\nuser2<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\nuser2<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    user2<span class=\"token punctuation\">.</span>score<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>We can also use the built-in function <code>Object.create</code>:</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> user3 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuser3<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Eva\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// rest of the code like before</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}