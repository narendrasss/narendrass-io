{"remainingRequest":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/Narendras/Documents/Projects/Website/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/Narendras/Documents/Projects/Website/docs/cpsc/320/m02.md?vue&type=template&id=7a2e95c8&","dependencies":[{"path":"/Users/Narendras/Documents/Projects/Website/docs/cpsc/320/m02.md","mtime":1539927460082},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js","mtime":1539927363321},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js","mtime":1539927363321},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h1\", { attrs: { id: \"asymptotic-analysis\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#asymptotic-analysis\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Asymptotic Analysis\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"code-runtime-problems\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#code-runtime-problems\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Code Runtime Problems\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"Give and briefly justify good \"),\n        _c(\"code\", [_vm._v(\"Θ\")]),\n        _vm._v(\n          \" bounds on the worst case running times for the following blocks of pseudocode dealing with an array \"\n        ),\n        _c(\"code\", [_vm._v(\"A\")]),\n        _vm._v(\" of length \"),\n        _c(\"code\", [_vm._v(\"n\")]),\n        _vm._v(\".\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"hr\"),\n      _vm._v(\" \"),\n      _c(\"ol\", [_c(\"li\", [_vm._v(\"Finding the maximum in a list.\")])]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              \"max = -infinity\\nfor each element a in A:\\n    if max < a\\n        max = a\\nreturn max\\n\"\n            )\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"5\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\"This has a worst case running time of \"),\n        _c(\"code\", [_vm._v(\"Θ(n)\")]),\n        _vm._v(\", as it iterates through every element of \"),\n        _c(\"code\", [_vm._v(\"A\")]),\n        _vm._v(\".\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"hr\"),\n      _vm._v(\" \"),\n      _c(\"ol\", { attrs: { start: \"2\" } }, [\n        _c(\"li\", [_vm._v('\"Median-of-three\" computation')])\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              \"first = A[1]\\nlast = A[n]\\nmiddle = A[floor(n/2)]\\nIf first <= middle And middle <= last:\\n    return middle\\nElse If middle <= first And first <= last:\\n    return first\\nElse:\\n    return last\\n\"\n            )\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"5\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"6\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"7\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"8\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"9\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\"This has a worst case running time of \"),\n        _c(\"code\", [_vm._v(\"Θ(1)\")]),\n        _vm._v(\", as no iteration occurs and accessing the \"),\n        _c(\"code\", [_vm._v(\"ith\")]),\n        _vm._v(\" element in an array (knowing the index) is \"),\n        _c(\"code\", [_vm._v(\"Θ(1)\")]),\n        _vm._v(\" time.\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"hr\"),\n      _vm._v(\" \"),\n      _c(\"ol\", { attrs: { start: \"3\" } }, [\n        _c(\"li\", [_vm._v(\"Counting inversions\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              \"inversions = 0\\nFor each index i from 1 to n:\\n    For each index j from (i+1) to n:\\n        If a[i] > a[j]:\\n            Increment inversions\\nReturn inversions\\n\"\n            )\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"5\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"6\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\"This has a worst case running time of \"),\n        _c(\"code\", [_vm._v(\"Θ(n^2)\")]),\n        _vm._v(\", as there is a \"),\n        _c(\"code\", [_vm._v(\"for\")]),\n        _vm._v(\" loop nested in another \"),\n        _c(\"code\", [_vm._v(\"for\")]),\n        _vm._v(\" loop. So for every one iteration in the outer loop, \"),\n        _c(\"code\", [_vm._v(\"n-1\")]),\n        _vm._v(\" iterations occur in the inner one.\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"hr\"),\n      _vm._v(\" \"),\n      _c(\"ol\", { attrs: { start: \"4\" } }, [\n        _c(\"li\", [_vm._v(\"Repeated division:\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              \"count = 0\\nWhile n > 0:\\n    count = count + 1\\n    n = floor(n/2)\\nReturn count\\n\"\n            )\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"5\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\"This has a worst case running time of \"),\n        _c(\"code\", [_vm._v(\"Θ(lgn)\")]),\n        _vm._v(\". This is a \"),\n        _c(\"code\", [_vm._v(\"while\")]),\n        _vm._v(\n          \" loop, so the number of iterations depend on the conditional. In this case, the iterations depend on the size of \"\n        ),\n        _c(\"code\", [_vm._v(\"n\")]),\n        _vm._v(\". Since \"),\n        _c(\"code\", [_vm._v(\"n\")]),\n        _vm._v(\" is halved every iteration, the algorithm runs in \"),\n        _c(\"code\", [_vm._v(\"lgn\")]),\n        _vm._v(\" time.\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"progress-of-while-loops\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#progress-of-while-loops\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Progress of While Loops\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"The number of iterations in a \"),\n        _c(\"code\", [_vm._v(\"while\")]),\n        _vm._v(\" loop is not as obvious as a \"),\n        _c(\"code\", [_vm._v(\"for\")]),\n        _vm._v(\n          \" loop. Thus it requires more analysis. Consider the following snippet of code:\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              \"i = findNeighbouringInversion(A)\\nwhile i >= 0\\n    swap A[i] and A[i+1]\\n    i = findNeighbouringInversion(A)\\n\"\n            )\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\"Where \"),\n        _c(\"code\", [_vm._v(\"findNeighbouringInversion(A)\")]),\n        _vm._v(\" is a function that returns an index \"),\n        _c(\"code\", [_vm._v(\"i\")]),\n        _vm._v(\" such that \"),\n        _c(\"code\", [_vm._v(\"A[i] > A[i+1]\")]),\n        _vm._v(\", or \"),\n        _c(\"code\", [_vm._v(\"-1\")]),\n        _vm._v(\" if there are none.\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h3\", { attrs: { id: \"measuring-progress\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#measuring-progress\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Measuring Progress\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"The \"),\n        _c(\"code\", [_vm._v(\"while\")]),\n        _vm._v(\" loop only stops when there are no inversions left in \"),\n        _c(\"code\", [_vm._v(\"A\")]),\n        _vm._v(\n          \". As a result we can say that the run time depends on the number of inversions.\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"An inversion requires two numbers, thus in an array of \"),\n        _c(\"code\", [_vm._v(\"n\")]),\n        _vm._v(\" elements there are \"),\n        _c(\"code\", [_vm._v(\"nC2\")]),\n        _vm._v(\" possible inversions; i.e. the number of inversions is in \"),\n        _c(\"code\", [_vm._v(\"O(n^2)\")]),\n        _vm._v(\". This is the upper bound for the number of inversions.\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"Since the run time depends on the number of inversions, \"),\n        _c(\"code\", [_vm._v(\"O(n^2)\")]),\n        _vm._v(\" is also the upper bound for the run time of this algorithm.\")\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}