{"remainingRequest":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/Narendras/Documents/Projects/Website/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/Narendras/Documents/Projects/Website/docs/cpsc/320/m04.md?vue&type=template&id=7a2f7e86&","dependencies":[{"path":"/Users/Narendras/Documents/Projects/Website/docs/cpsc/320/m04.md","mtime":1539927460091},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js","mtime":1539927363321},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js","mtime":1539927363321},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h1\", { attrs: { id: \"greedy-algorithms\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#greedy-algorithms\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Greedy Algorithms\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"A greedy algorthim is defined as an algorithm that chooses to maximize efficiency at every iteration. One example is the algorithm to solve the interval scheduling problem.\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"interval-scheduling\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#interval-scheduling\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Interval Scheduling\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"Say we have some resource and a set of requests \"),\n        _c(\"code\", [_vm._v(\"{1,2,..,n}\")]),\n        _vm._v(\" where the i\"),\n        _c(\"sup\", [_vm._v(\"th\")]),\n        _vm._v(\" request corresponds to an interval of time starting at \"),\n        _c(\"code\", [_vm._v(\"s(i)\")]),\n        _vm._v(\" and finishing at \"),\n        _c(\"code\", [_vm._v(\"f(i)\")]),\n        _vm._v(\".\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h3\", { attrs: { id: \"optimal-solution\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#optimal-solution\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Optimal Solution\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"The optimal solution is achieved by first picking the request \"\n        ),\n        _c(\"code\", [_vm._v(\"i\")]),\n        _vm._v(\" that finish the fastest. This is considered \"),\n        _c(\"em\", [_vm._v(\"greedy\")]),\n        _vm._v(\n          \" because we maximize the amount of time left to satisfy other requests.\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- line-numbers-mode\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              \"R = set of all requests, A = empty set\\nwhile R is not empty\\n    i = request in R with smallest finishing time\\n    add i to A\\n    delete all requests not compatible with i\\nreturn A\\n\"\n            )\n          ])\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"line-numbers-wrapper\" }, [\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"1\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"2\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"3\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"4\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"5\")]),\n          _c(\"br\"),\n          _c(\"span\", { staticClass: \"line-number\" }, [_vm._v(\"6\")]),\n          _c(\"br\")\n        ])\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          \"The picture below shows some initial steps for some given instance of the interval scheduing problem:\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"img\", {\n          attrs: {\n            src: require(\"./assets/interval-sched-1.png\"),\n            alt: \"Interval scheduling steps\"\n          }\n        })\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"clustering\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#clustering\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Clustering\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"The algorithm to solve the clustering problem performs in the following steps:\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"ol\", [\n        _c(\"li\", [\n          _vm._v(\"Sort a list of edges \"),\n          _c(\"code\", [_vm._v(\"E\")]),\n          _vm._v(\" in decreasing order by similarity.\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"Initialize each node as its own category.\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\"Initialize the category count to \"),\n          _c(\"code\", [_vm._v(\"|V|\")]),\n          _vm._v(\".\")\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\"While there are more than \"),\n          _c(\"code\", [_vm._v(\"k\")]),\n          _vm._v(\" categories:\\n\"),\n          _c(\"ol\", [\n            _c(\"li\", [\n              _vm._v(\"Remove the highest similarity edge \"),\n              _c(\"code\", [_vm._v(\"(u,v)\")]),\n              _vm._v(\" from the list.\")\n            ]),\n            _vm._v(\" \"),\n            _c(\"li\", [\n              _vm._v(\"If \"),\n              _c(\"code\", [_vm._v(\"u\")]),\n              _vm._v(\" and \"),\n              _c(\"code\", [_vm._v(\"v\")]),\n              _vm._v(\" are not in the same category: merge \"),\n              _c(\"code\", [_vm._v(\"u\")]),\n              _vm._v(\"'s and \"),\n              _c(\"code\", [_vm._v(\"v\")]),\n              _vm._v(\"'s categories, and reduce the category count by 1.\")\n            ])\n          ])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"h3\", { attrs: { id: \"questions\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#questions\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Questions\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"Imagine we're looking at a categorization produced by our algorithm in which the inter-category edge with maximum similarity is \"\n        ),\n        _c(\"code\", [_vm._v(\"e\")]),\n        _vm._v(\".\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"Can our greedy algorithm's solution have an intra-category edge with \"\n        ),\n        _c(\"em\", [_vm._v(\"lower\")]),\n        _vm._v(\" weight than \"),\n        _c(\"code\", [_vm._v(\"e\")]),\n        _vm._v(\"?\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"hr\"),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"Give a bound on the maximum similarity of an arbitrary solution in terms of any one of its inter-category edge weights.\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"hr\"),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"Give a bound on the maximum similarity of a solution produced by the greedy algorithm in terms of the weight of any one of the edges it considered in step 4.\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"hr\"),\n      _vm._v(\" \"),\n      _c(\"h3\", { attrs: { id: \"proof-of-correctness\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#proof-of-correctness\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Proof of Correctness\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"An \"),\n        _c(\"strong\", [_vm._v(\"instance\")]),\n        _vm._v(\" of the clustering problem is defined as:\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [_c(\"code\", [_vm._v(\"n\")]), _vm._v(\" photos\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_c(\"code\", [_vm._v(\"k\")]), _vm._v(\" categories\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"Similarity scores for every pair of photos\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"A \"),\n        _c(\"strong\", [_vm._v(\"valid solution\")]),\n        _vm._v(\" \"),\n        _c(\"code\", [_vm._v(\"S\")]),\n        _vm._v(\" is defined as a partition of photos into \"),\n        _c(\"code\", [_vm._v(\"k\")]),\n        _vm._v(\" non-empty categories.\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"The \"),\n        _c(\"strong\", [_vm._v(\"goodness\")]),\n        _vm._v(\" of a solution \"),\n        _c(\"code\", [_vm._v(\"S\")]),\n        _vm._v(\" is the max similarity \"),\n        _c(\"code\", [_vm._v(\"sim(u,v)\")]),\n        _vm._v(\", where \"),\n        _c(\"code\", [_vm._v(\"(u,v)\")]),\n        _vm._v(\" is an inter-category edge.\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"Our goal is to \"),\n        _c(\"em\", [_vm._v(\"minimize\")]),\n        _vm._v(\" the goodness. Let \"),\n        _c(\"code\", [_vm._v(\"G\")]),\n        _vm._v(\" be the solution provided by our greedy algorithm.\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"tip custom-block\" }, [\n        _c(\"p\", { staticClass: \"custom-block-title\" }, [_vm._v(\"Claim\")]),\n        _vm._v(\" \"),\n        _c(\"p\", [\n          _vm._v(\"The goodness of \"),\n          _c(\"code\", [_vm._v(\"G\")]),\n          _vm._v(\" is <= the goodness of \"),\n          _c(\"code\", [_vm._v(\"S\")]),\n          _vm._v(\" for all valid solutions \"),\n          _c(\"code\", [_vm._v(\"S\")]),\n          _vm._v(\".\")\n        ])\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}