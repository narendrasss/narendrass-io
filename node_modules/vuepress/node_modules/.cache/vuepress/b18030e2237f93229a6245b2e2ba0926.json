{"remainingRequest":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/Narendras/Documents/Projects/Website/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/Narendras/Documents/Projects/Website/docs/cpsc/320/m01.md?vue&type=template&id=7a2e2169&","dependencies":[{"path":"/Users/Narendras/Documents/Projects/Website/docs/cpsc/320/m01.md","mtime":1539927460079},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js","mtime":1539927363321},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js","mtime":1539927363321},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"stable-matching-problem\"><a class=\"header-anchor\" href=\"#stable-matching-problem\" aria-hidden=\"true\">#</a> Stable Matching Problem</h1>\n<h2 id=\"the-basic-problem\"><a class=\"header-anchor\" href=\"#the-basic-problem\" aria-hidden=\"true\">#</a> The Basic Problem</h2>\n<p>The stable matching problem <em>(SMP)</em> is a problem best described by example. Say there are a group of <code>n</code> men and women. Each person has a preference list that contains all members of the other group. The goal is to match up each man and woman with each other according to their preference lists.</p>\n<p>An <em>instability</em> is a pair <code>(m,w)</code> such that <code>m</code> prefers <code>w</code> over its current pair and vice versa.</p>\n<p>The following is an example instance of SMP:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">M</th>\n<th style=\"text-align:left\">W</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">m1: w1 w2</td>\n<td style=\"text-align:left\">w1: m1 m2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">m2: w2 w1</td>\n<td style=\"text-align:left\">w2: m1 m2</td>\n</tr>\n</tbody>\n</table>\n<p>The corresponding solution to this instance would be: <code>{(m1,w1),(m2,w2)}</code>.</p>\n<h3 id=\"gale-shapley-algorithm\"><a class=\"header-anchor\" href=\"#gale-shapley-algorithm\" aria-hidden=\"true\">#</a> Gale-Shapley Algorithm</h3>\n<p>The Gale-Shapley <em>(GS)</em> algorithm is an algorithm for solving SMP. The algorithm is as follows:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>function stableMatching {\n    Initialize all m in M and w in W to be free\n    while there is a free man m who still has a woman w to propose to {\n        w = first woman on m&#39;s preference list to whom m has not yet proposed\n        if w is free\n            (m, w) is paired\n        else there is a pair (m&#39;, w)\n            if w prefers m over m&#39;\n                (m, w) is paired\n                m&#39; is free\n            else\n                (m&#39;, w) remains paired\n                m is still free\n    }\n}\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>For every iteration of GS, a man is checked against a woman who is further in his preference list. On the other hand, a woman is checked against a man who is higher up in her preference list.</p>\n<h2 id=\"stable-matching-incomplete\"><a class=\"header-anchor\" href=\"#stable-matching-incomplete\" aria-hidden=\"true\">#</a> Stable Matching Incomplete</h2>\n<p>Stable matching incomplete <em>(SMI)</em> is a variant of SMP where the preference lists may not necessarily contain <em>all</em> members of the other group.</p>\n<p>A <strong>valid</strong> solution of SMI is where, for every pair <code>(m,w)</code>, <code>w</code> appears on <code>m</code>'s preference list and <code>m</code> appears on <code>w</code>'s preference list.</p>\n<p>There are three possible instabilities in SMI:</p>\n<ol>\n<li>A pair <code>(m,w)</code> such that <code>m</code> prefers <code>w</code> over his current partner, and <code>w</code> prefers <code>m</code> over her current partner.</li>\n<li>A pair <code>(m,w)</code> such that <code>m</code> prefers <code>w</code> over his current partner, <code>w</code> is unmatched, and <code>m</code> appears on <code>w</code>'s preference list.</li>\n<li>A pair <code>(m,w)</code> such that <code>m</code> is unmatched, <code>w</code> prefers <code>m</code> over her current partner, and <code>w</code> appears on <code>m</code>'s preference list.</li>\n</ol>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">Note</p>\n<p>It is possible for a solution to SMI to be <em>good</em>, i.e. contains no instabilities, but not <em>perfect</em>, i.e. not all <code>m</code> in <code>M</code> and all <code>w</code> in <code>W</code> is matched.</p>\n</div>\n<h3 id=\"solution\"><a class=\"header-anchor\" href=\"#solution\" aria-hidden=\"true\">#</a> Solution</h3>\n<p>A solution to SMI involves a simple addition to the GS algorithm shown highlighted below:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><div class=\"highlight-lines\"><br><br><br><br><div class=\"highlighted\">&nbsp;</div><br><br><br><br><br><br><br><br><br><br><br><br></div><pre v-pre class=\"language-text\"><code>function stableMatching {\n    Initialize all m in M and w in W to be free\n    while there is a free man m who still has a woman w to propose to {\n        w = first woman on m&#39;s preference list to whom m has not yet proposed\n        if w is on m&#39;s preference list:\n            if w is free\n                (m, w) is paired\n            else there is a pair (m&#39;, w)\n                if w prefers m over m&#39;\n                    (m, w) is paired\n                    m&#39; is free\n                else\n                    (m&#39;, w) remains paired\n                    m is still free\n    }\n}\n</code></pre><!--beforeend--></div><!--afterend--><h2 id=\"stable-matching-with-ties\"><a class=\"header-anchor\" href=\"#stable-matching-with-ties\" aria-hidden=\"true\">#</a> Stable Matching with Ties</h2>\n<p>Stable matching with ties <em>(SMT)</em> is a variant of SMP where the preference lists may contain ties.</p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">Example</p>\n<p>If a person <code>m</code> has <code>w1 = w2</code> in their preference list, <code>m</code> is indifferent between <code>w1</code> and <code>w2</code>. In this case, any solution (assuming other pairs are good and stable) that contains <code>(m,w1)</code> and <code>(m,w2)</code> is considered a <strong>good</strong> solution.</p>\n</div>\n<p>SMT defines two types of instabilities - strong and weak:</p>\n<ul>\n<li>A <strong>strong</strong> instability is a pair <code>(m,w)</code> where <code>m</code> <em>strictly</em> prefers <code>w</code> over its current partner and vice versa.</li>\n<li>A <strong>weak</strong> instability is a pair <code>(m,w)</code> where one of the following holds:\n<ul>\n<li><code>m</code> prefers <code>w</code> over his current partner and <code>w</code> either prefers <code>m</code> over her current partner or is indifferent between them both.</li>\n<li><code>w</code> prefers <code>m</code> over her current partner and <code>m</code> either prefers <code>w</code> over his current partner or is indifferent between them both.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"solution-2\"><a class=\"header-anchor\" href=\"#solution-2\" aria-hidden=\"true\">#</a> Solution</h3>\n<p>An instance of SMT is converted to an instance of SMP by &quot;breaking&quot; the ties. For example, given the following instance of SMT:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">M</th>\n<th style=\"text-align:left\">W</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">m1: w1 w2</td>\n<td style=\"text-align:left\">w1: m1 = m2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">m2: w1 w2</td>\n<td style=\"text-align:left\">w2: m1 m2</td>\n</tr>\n</tbody>\n</table>\n<p>We can convert this instance by breaking the tie in <code>w1</code>'s preference list to either <code>m1 m2</code> or <code>m2 m1</code>. If we choose the former, the instance becomes:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">M</th>\n<th style=\"text-align:left\">W</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">m1: w1 w2</td>\n<td style=\"text-align:left\">w1: m1 m2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">m2: w1 w2</td>\n<td style=\"text-align:left\">w2: m1 m2</td>\n</tr>\n</tbody>\n</table>\n<p>This leads us to the following solution: <code>(m1,w1),(m2,w2)</code>. Notice how this solution has a weak instability, as <code>m2</code> prefers <code>w1</code> over <code>w2</code> and <code>w1</code> is indifferent between <code>m2</code> and <code>m1</code>.</p>\n<p>Breaking the tie the other way changes the solution, but does not remove the instability:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">M</th>\n<th style=\"text-align:left\">W</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">m1: w1 w2</td>\n<td style=\"text-align:left\">w1: m2 m1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">m2: w1 w2</td>\n<td style=\"text-align:left\">w2: m1 m2</td>\n</tr>\n</tbody>\n</table>\n<p>With solution <code>(m1,w2),(m2,w1)</code>. The weak instability is now the pair <code>(m1,w1)</code>.</p>\n<h2 id=\"resident-hospital-problem\"><a class=\"header-anchor\" href=\"#resident-hospital-problem\" aria-hidden=\"true\">#</a> Resident Hospital Problem</h2>\n<p>The resident hospital problem <em>(RHP)</em> is a variant of SMP where one of the groups can take in some number (one or more) of the other group:</p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">Problem</p>\n<p>A group of residents each needs a residency in a hospital. Each hospital can take in some number (one or more) residents, with some hospital capable of taking in more (or fewer) than others. Each group has preferences over which members from the other group they would like to end up with.</p>\n</div>\n<h3 id=\"trivial-small-instances\"><a class=\"header-anchor\" href=\"#trivial-small-instances\" aria-hidden=\"true\">#</a> Trivial &amp; Small Instances</h3>\n<p>All instances with 0 hospitals and 0 residents are trivial (the solution would be the empty set). All instances with exactly 1 hospital would also be trivial (put all residents into that 1 hospital).</p>\n<p>An example instance of RHP would be:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">R</th>\n<th style=\"text-align:left\">H</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">r1: h1 h2</td>\n<td style=\"text-align:left\">h1 (1): r2 r1 r3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r2: h2 h1</td>\n<td style=\"text-align:left\">h2 (2): r1 r2 r3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r3: h1 h2</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<p>Note that all instances of RHP where each hospital has exactly 1 slot is <em>also</em> an instance of SMP. An instability in RHP is defined as:</p>\n<div class=\"tip custom-block\"><p class=\"custom-block-title\">Instability</p>\n<p>A pair of hospital <em>h</em> and resident <em>r</em> such that <em>r</em> prefers <em>h</em> over its current hospital and <em>h</em> prefers <em>r</em> over its least-preferred member.</p>\n</div>\n<h3 id=\"solution-by-reduction\"><a class=\"header-anchor\" href=\"#solution-by-reduction\" aria-hidden=\"true\">#</a> Solution by Reduction</h3>\n<p>We can find a solution to RHP by <em>reducing</em> RHP to SMP and then running the Gale-Shapely algorithm.</p>\n<ol>\n<li>Clone each hospital <em>h</em> such that there are exactly <code>s(h)</code> of that hospital where <code>s(h)</code> represents the number of residents <em>h</em> can take.</li>\n<li>For every hospital that's in a resident <em>r</em>'s preference list, clone that hospital there as well.</li>\n</ol>\n<p>Our example instance above would then become:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">R</th>\n<th style=\"text-align:left\">H</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">r1: h1 h2_1 h2_2</td>\n<td style=\"text-align:left\">h1: r2 r1 r3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r2: h2_1 h2_2 h1</td>\n<td style=\"text-align:left\">h2_1: r1 r2 r3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r3: h1 h2_1 h2_2</td>\n<td style=\"text-align:left\">h2_2: r1 r2 r3</td>\n</tr>\n</tbody>\n</table>\n<p>This is now an appropriate instance of SMP. Running the Gale-Shapely algorithm with this instance would result in the following solution: <code>{(h1, r1), (h2_2, r2), (h2_3, r3)}</code>.</p>\n<h3 id=\"proof-of-correctness\"><a class=\"header-anchor\" href=\"#proof-of-correctness\" aria-hidden=\"true\">#</a> Proof of Correctness</h3>\n<p>We only need to show that if the solution to RHP is unstable, then the SMP is unstable.</p>\n<p>A solution to RHP is unstable if there is a pair <code>(h,r)</code> such that <em>r</em> prefers <em>h</em> over its current hospital and <em>h</em> prefers <em>r</em> over its least-preferred member <em>r'</em>. This essentially means that <em>r</em> prefers all clones of <em>h</em> over all clones of its current hospital. Likewise, all clones of <em>h</em> would prefer <em>r</em> over <em>r'</em>. Thus any one of <em>h</em>'s clones consitute an instability with <em>r</em>.</p>\n</div>\n",null]}