{"remainingRequest":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/Narendras/Documents/Projects/Website/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/Narendras/Documents/Projects/Website/docs/cpsc/320/m02.md?vue&type=template&id=7a2e95c8&","dependencies":[{"path":"/Users/Narendras/Documents/Projects/Website/docs/cpsc/320/m02.md","mtime":1539927460082},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js","mtime":1539927363321},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/cache-loader/dist/cjs.js","mtime":1539927363321},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Narendras/Documents/Projects/Website/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1533872387000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"asymptotic-analysis\"><a class=\"header-anchor\" href=\"#asymptotic-analysis\" aria-hidden=\"true\">#</a> Asymptotic Analysis</h1>\n<h2 id=\"code-runtime-problems\"><a class=\"header-anchor\" href=\"#code-runtime-problems\" aria-hidden=\"true\">#</a> Code Runtime Problems</h2>\n<p>Give and briefly justify good <code>Θ</code> bounds on the worst case running times for the following blocks of pseudocode dealing with an array <code>A</code> of length <code>n</code>.</p>\n<hr>\n<ol>\n<li>Finding the maximum in a list.</li>\n</ol>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>max = -infinity\nfor each element a in A:\n    if max &lt; a\n        max = a\nreturn max\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>This has a worst case running time of <code>Θ(n)</code>, as it iterates through every element of <code>A</code>.</p>\n<hr>\n<ol start=\"2\">\n<li>&quot;Median-of-three&quot; computation</li>\n</ol>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>first = A[1]\nlast = A[n]\nmiddle = A[floor(n/2)]\nIf first &lt;= middle And middle &lt;= last:\n    return middle\nElse If middle &lt;= first And first &lt;= last:\n    return first\nElse:\n    return last\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>This has a worst case running time of <code>Θ(1)</code>, as no iteration occurs and accessing the <code>ith</code> element in an array (knowing the index) is <code>Θ(1)</code> time.</p>\n<hr>\n<ol start=\"3\">\n<li>Counting inversions</li>\n</ol>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>inversions = 0\nFor each index i from 1 to n:\n    For each index j from (i+1) to n:\n        If a[i] &gt; a[j]:\n            Increment inversions\nReturn inversions\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>This has a worst case running time of <code>Θ(n^2)</code>, as there is a <code>for</code> loop nested in another <code>for</code> loop. So for every one iteration in the outer loop, <code>n-1</code> iterations occur in the inner one.</p>\n<hr>\n<ol start=\"4\">\n<li>Repeated division:</li>\n</ol>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>count = 0\nWhile n &gt; 0:\n    count = count + 1\n    n = floor(n/2)\nReturn count\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>This has a worst case running time of <code>Θ(lgn)</code>. This is a <code>while</code> loop, so the number of iterations depend on the conditional. In this case, the iterations depend on the size of <code>n</code>. Since <code>n</code> is halved every iteration, the algorithm runs in <code>lgn</code> time.</p>\n<h2 id=\"progress-of-while-loops\"><a class=\"header-anchor\" href=\"#progress-of-while-loops\" aria-hidden=\"true\">#</a> Progress of While Loops</h2>\n<p>The number of iterations in a <code>while</code> loop is not as obvious as a <code>for</code> loop. Thus it requires more analysis. Consider the following snippet of code:</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>i = findNeighbouringInversion(A)\nwhile i &gt;= 0\n    swap A[i] and A[i+1]\n    i = findNeighbouringInversion(A)\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>Where <code>findNeighbouringInversion(A)</code> is a function that returns an index <code>i</code> such that <code>A[i] &gt; A[i+1]</code>, or <code>-1</code> if there are none.</p>\n<h3 id=\"measuring-progress\"><a class=\"header-anchor\" href=\"#measuring-progress\" aria-hidden=\"true\">#</a> Measuring Progress</h3>\n<p>The <code>while</code> loop only stops when there are no inversions left in <code>A</code>. As a result we can say that the run time depends on the number of inversions.</p>\n<p>An inversion requires two numbers, thus in an array of <code>n</code> elements there are <code>nC2</code> possible inversions; i.e. the number of inversions is in <code>O(n^2)</code>. This is the upper bound for the number of inversions.</p>\n<p>Since the run time depends on the number of inversions, <code>O(n^2)</code> is also the upper bound for the run time of this algorithm.</p>\n</div>\n",null]}